[
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "An Example Workflow",
    "section": "",
    "text": "You have just received an assigment email about package Author-1234. You have carefully read it. Now what?"
  },
  {
    "objectID": "workflow.html#package-acquisition",
    "href": "workflow.html#package-acquisition",
    "title": "An Example Workflow",
    "section": "1 Package Acquisition",
    "text": "1 Package Acquisition\n\nGet or update repo:\n\nIf this is the first round, clone the git repo (using url in your email) to your computer. For example to ~/JPE-replications/Author-1234. That would be\ncd ~/JPE-replications/Author-1234\ngit clone url_in_email\nIf this is subsequent round n, say n=3, you just have to get the next round branch:\ncd ~/JPE-replications/Author-1234\ngit branch -r  # check which remote branches are available\ngit checkout -b round3 origin/round3 # creates local branch round3 from remote branch round3\n\nDownload dropbox folder with full package and paper. That‚Äôs the second URL in your email.\nExtract package (if compressed), and copy into the git repo as ~/JPE-replications/Author-1234/replication-package\n\n\n\n\n\n\n\nDanger Zone ‚õîÔ∏è\n\n\n\nDo not copy the replication package anywhere else on your computer (maybe because you are uncomfortable with git). Copying files back and forth manually on your computer is a recipe for assured disaster - don‚Äôt go there."
  },
  {
    "objectID": "workflow.html#first-compilation-of-report",
    "href": "workflow.html#first-compilation-of-report",
    "title": "An Example Workflow",
    "section": "2 First Compilation of report",
    "text": "2 First Compilation of report\n\nBefore doing anything else, open VScode at ~/JPE-replications/Author-1234.\nOpen file TEMPLATE.qmd\nHit Shift-Cmd-K or open command palette and type quarto: preview\nYou will see the template I prepared for this round of the package. Make sure it looks ok and all my prepared content shows up."
  },
  {
    "objectID": "workflow.html#doing-the-replication-and-preparing-report",
    "href": "workflow.html#doing-the-replication-and-preparing-report",
    "title": "An Example Workflow",
    "section": "3 Doing the Replication and Preparing Report",
    "text": "3 Doing the Replication and Preparing Report\nStart working on the job, by going through TEMPLATE.qmd and make edits as required."
  },
  {
    "objectID": "workflow.html#submitting-report",
    "href": "workflow.html#submitting-report",
    "title": "An Example Workflow",
    "section": "4 Submitting report",
    "text": "4 Submitting report\nThis again differs by whether first or subsequent round.\nFirst round:\ngit add package-output-map.xlsx\ngit add images # for your screenshots\ngit add TEMPLATE.qmd  # your edits\ngit add TEMPLATE.pdf  # the compiled version of your report\ngit add TEMPLATE-APPENDIX.qmd  # if you made any edits\ngit commit -m 'first round report. code breaks. missing citations.'\ngit push origin round1  # pushes back to `round1` branch - this must be the branch you cloned from, don't create a new branch!\nround n:\n\nLet‚Äôs say again that n=3.\n\ngit add package-output-map.xlsx\ngit add images # for your screenshots\ngit add TEMPLATE.qmd  # your edits\ngit add TEMPLATE.pdf  # the compiled version of your report\ngit add TEMPLATE-APPENDIX.qmd  # if you made any edits\ngit commit -m 'round 3 report. almost done. still missing citations.'\ngit push origin round3  # pushes back to `round3` branch"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Journal of Political Economy  Replicator Website",
    "section": "",
    "text": "This website provides all the relevant infos and training materials for replicators at the Journal of Political Economy.\n\nExample Workflow\ngit training"
  },
  {
    "objectID": "training/git-prereq.html",
    "href": "training/git-prereq.html",
    "title": "Git Intro Workshop",
    "section": "",
    "text": "Welcome to the Git Workshop! Follow these steps before the session to make sure you‚Äôre ready to use Git and GitHub with HTTPS authentication.\n\n\n\nMake sure you have:\n\nGit installed (check with git --version)\nA GitHub account (https://github.com)\nA working terminal (e.g.¬†Git Bash on Windows, Terminal on macOS/Linux)\nVScode installed, otherwise click here. You need this tool to write reports.\nYou can download the Github GUI for your OS as well: https://desktop.github.com/download/. This is helpful for authentication issues (authenticates seamlessly).\n\n\n\n\n\nTo avoid entering your credentials every time, configure Git to store them securely.\n\n\ngit config --global credential.helper manager-core\n\n\n\ngit config --global credential.helper osxkeychain\n\n\n\ngit config --global credential.helper cache\n\nüí° You only need to run this once per system.\n\n\n\n\n\n\n\nVisit: https://github.com/settings/tokens\nClick ‚ÄúGenerate new token (classic)‚Äù\nFill in the form:\n\nNote: Git Workshop Token\nExpiration: 90 days\nScopes:\n\n‚úÖ repo ‚Äì full access to GitHub repositories\n‚úÖ workflow ‚Äì allows triggering and viewing GitHub Actions\n\n\nClick Generate token\nCopy the token now ‚Äî you won‚Äôt be able to see it again.\n‚û§ Save it in a safe place on your computer, like a plain text file:\nmy-github-token.txt\n\n\n\n\n\nRun the following command to verify that Git can connect to GitHub using HTTPS:\ngit ls-remote https://github.com/github/gitignore.git\nYou will be prompted for your GitHub username and your Personal Access Token as the password.\n\n‚úÖ If it returns a list of references (e.g.¬†refs/heads/main), you‚Äôre ready.\n‚ùå If authentication fails, double-check that your token has the correct scopes and hasn‚Äôt expired.\n\n\n\n\n\nSet your name and email so commits are properly attributed.\ngit config --global user.name \"Your Full Name\"\ngit config --global user.email \"you@example.com\"",
    "crumbs": [
      "Pre workshop"
    ]
  },
  {
    "objectID": "training/git-prereq.html#pre-workshop-setup-guide-vscode-git-github-https-authentication",
    "href": "training/git-prereq.html#pre-workshop-setup-guide-vscode-git-github-https-authentication",
    "title": "Git Intro Workshop",
    "section": "",
    "text": "Welcome to the Git Workshop! Follow these steps before the session to make sure you‚Äôre ready to use Git and GitHub with HTTPS authentication.\n\n\n\nMake sure you have:\n\nGit installed (check with git --version)\nA GitHub account (https://github.com)\nA working terminal (e.g.¬†Git Bash on Windows, Terminal on macOS/Linux)\nVScode installed, otherwise click here. You need this tool to write reports.\nYou can download the Github GUI for your OS as well: https://desktop.github.com/download/. This is helpful for authentication issues (authenticates seamlessly).\n\n\n\n\n\nTo avoid entering your credentials every time, configure Git to store them securely.\n\n\ngit config --global credential.helper manager-core\n\n\n\ngit config --global credential.helper osxkeychain\n\n\n\ngit config --global credential.helper cache\n\nüí° You only need to run this once per system.\n\n\n\n\n\n\n\nVisit: https://github.com/settings/tokens\nClick ‚ÄúGenerate new token (classic)‚Äù\nFill in the form:\n\nNote: Git Workshop Token\nExpiration: 90 days\nScopes:\n\n‚úÖ repo ‚Äì full access to GitHub repositories\n‚úÖ workflow ‚Äì allows triggering and viewing GitHub Actions\n\n\nClick Generate token\nCopy the token now ‚Äî you won‚Äôt be able to see it again.\n‚û§ Save it in a safe place on your computer, like a plain text file:\nmy-github-token.txt\n\n\n\n\n\nRun the following command to verify that Git can connect to GitHub using HTTPS:\ngit ls-remote https://github.com/github/gitignore.git\nYou will be prompted for your GitHub username and your Personal Access Token as the password.\n\n‚úÖ If it returns a list of references (e.g.¬†refs/heads/main), you‚Äôre ready.\n‚ùå If authentication fails, double-check that your token has the correct scopes and hasn‚Äôt expired.\n\n\n\n\n\nSet your name and email so commits are properly attributed.\ngit config --global user.name \"Your Full Name\"\ngit config --global user.email \"you@example.com\"",
    "crumbs": [
      "Pre workshop"
    ]
  },
  {
    "objectID": "training/git-prereq.html#final-checklist",
    "href": "training/git-prereq.html#final-checklist",
    "title": "Git Intro Workshop",
    "section": "‚úÖ Final Checklist",
    "text": "‚úÖ Final Checklist\n\nGit installed and working\nVSCode installed\nGitHub account ready\nCredential helper configured\nPersonal Access Token created and saved\nTest command (git ls-remote) successful\nGit name and email configured\n\nYou‚Äôre now ready for the workshop!",
    "crumbs": [
      "Pre workshop"
    ]
  },
  {
    "objectID": "replicator-resources.html",
    "href": "replicator-resources.html",
    "title": "Replicator Resources",
    "section": "",
    "text": "This page contains tips and tricks for replicators.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "replicator-resources.html#hard-coded-numbers",
    "href": "replicator-resources.html#hard-coded-numbers",
    "title": "Replicator Resources",
    "section": "Hard Coded Numbers",
    "text": "Hard Coded Numbers\n\nWithout proper documentation of how they were obtained, hard coded numbers are not admissible in code that generates results like plots or tables.\nPlots are particularly critical here.\nA fairly quick part of your work should be a scan of all source code to identify hard coded numbers and make sure everything is proper with those.\nHere is an example which triggers our suspicion: The below code is used to make a bar chart. However, the heights of the bars are hard coded as numbers. If it is not obvious where the numbers come from, then this fact should be a prominent feature in your report.\n\n\n\nhard coded numbers in code for a plot (python)\n\n\n\n\nHow to find hard coded numbers?\nRegular expressions (Regex) are the perfect tool for this. I recommend opening the full replication package in VScode. Here is an example. You can download the example package as usual from our dropbox at EJ-2-submitted-replication-packages/Oswald-123456-R1.\n\nOpen Package in VScode\n\n\n\nopening full replication package in VScode\n\n\nNext, activate the search function, either by clicking or by typing Cmd+Shift+F:\n\n\n\nactivating search in entire project\n\n\nMake sure to turn on regex search by clicking the symbol .* in the right of the search text box. Now you can enter regex search terms. Here, I‚Äôm entering \\d for digits (i.e.¬†numbers), and I‚Äôm saying {3,10} to instruct the search to look for sequences of numbers with length in between 3 and 10. That is, numbers ranging from 3 up to 10 digits. You can change that of course. Notice how the search returns immediately all occurences of such numbers in the project.\n\n\n\nusing regex search to look for numbers between 3 and 10 digits long. plots.jl seems to contain hard coded numbers as source code.\n\n\nFinally, look whether any of those numbers do appear in a code file. Here, the plots.jl seems to be suspicious. Double click on a particular search results opens the relevant source file. Gotcha!\n\n\n\nExample of hard coded numbers to generate a plot. Unless the origin and reproducibililty of those numbers is clearly documented in the readme and in the source code, this is not admissible.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "replicator-resources.html#missing-software-libraries-in-readme",
    "href": "replicator-resources.html#missing-software-libraries-in-readme",
    "title": "Replicator Resources",
    "section": "Missing Software Libraries in README",
    "text": "Missing Software Libraries in README\n\nIt is very common that authors forget to list all required software libraries, or do not list the version information that goes with those libraries.\nBest practice would be to use an empty system where no libraries are pre-installed. The nuvolos platform is helpful here, because this is the case there.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "replicator-resources.html#python",
    "href": "replicator-resources.html#python",
    "title": "Replicator Resources",
    "section": "python",
    "text": "python\n\n\n\n\n\n\nWhere to get python?\n\n\n\nFirst things first. How can you get python on your computer? I strongly recommend the conda distribution - please follow instructions to install. This is what is available on nuvolos (i.e.¬†nothing to do for python on nuvolos, it‚Äôs there.)\n\n\nNext, on to our case study. An author says:\n\nWe use python. You must install the networkx package from pip. The rest of the packages is standard.\n\nThis is an incomplete specification on various counts.\n\nWe must know which python version to use. There are many.\nWe cannot work with the rest of the packages is standard. There is no notion of standard in this setting.\nInstalling via pip for instance depends on which particular python version is installed, and how that particular version of networkx relates to those standard packages mentioned above.\n\nüëâ It is highly likely that following those instructions, we end up with a vastly different set of package (and base python!) versions than what the authors used on their machine.\nüëâ Not good, because this alone could lead to diverging results and/or errors.\n\n\n\n\n\n\nSolution: Virtual Environments\n\n\n\nEasiest with anaconda on nuvolos or your own machine, but base python also has a solution.\n\nconda solution\nbase python solution\n\nI recommend the conda route.\n\n\nLet‚Äôs solve this particular case. We will create a virtual environment for ourselves, making some assumptions along the way. We can at least communicate with the authors on that assumed basis. Therefore, we open VScode and look at the notebook file (notice this is much quicker than opening a jupyterlab session). We note that in the first code box they import the required libraries. We want to have an environment containing those packages.\n\n\n\nOpening a jupyter notebook in VSCode to see package dependencies\n\n\nThere are two ways to create an environment: on the command line or by writing a .yml file.\n\nCreating a conda env on the command line\nThis is easy.\n\nOpen a terminal in VScode via the command palette (type shift-cmd-p or click cogwheel bottom left). In the command palette type create new terminal and hit enter.\nIn the terminal window create the new environment, maybe called with the author‚Äôs name, specifying all required versions, as well as an assumed python version:\n# creates new virtual env called `author-name`\n# notice that the nuvolos terminal runs conda by default and tells\n# you that your are in the (base) environment now:\n(base) 11:35:56 - nuvolos:/files$ conda create -n author-name python=3.11 matplotlib pandas numpy networkx seaborn scipy  \n\nChannels:\n - defaults\n - conda-forge\nPlatform: linux-64\nCollecting package metadata (repodata.json): done\nSolving environment: - \nhit y when asked whether to install packages:\nDownloading and Extracting Packages:\n\nPreparing transaction: done                                                                 \nVerifying transaction: done                                                       \nExecuting transaction: done\n#                                                          \n# To activate this environment, use\n#                              \n#     $ conda activate author-name                                                          \n#                                       \n# To deactivate an active environment, use\n#                                                                                        \n#     $ conda deactivate \nAfter it‚Äôs done, we can activate that environment. Notice the prompt switching to the new env.\n(base) 11:40:14 - nuvolos:/files$ conda activate author-name                                                                                                       \n(author-name) 11:41:42 - nuvolos:/files$             \nFrom that point on, we are sure what versions are being used when we say import networkx, for example:\n(author-name) 11:41:42 - nuvolos:/files$ python --version      \nPython 3.11.9  # we *asked* for that version!\n(author-name) 11:42:20 - nuvolos:/files$ python\nPython 3.11.9 (main, Apr 19 2024, 16:48:06) [GCC 11.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import networkx\n&gt;&gt;&gt; print(networkx.__version__)\n3.3   # that is default version compatible with our env\n&gt;&gt;&gt; \nSo, we are now using python 3.11.9 and networkx 3.3.\nOftentimes, authors supply jupyter notebooks (as in the present case). We need a way to run those inside our environment. So, we also install a notebook runner, while we are in the activated env:\n# install Python kernel in new conda env\n(author-name) 11:42:20 - nuvolos:/files$ conda install ipykernel\n# configure new notebook kernel\n(author-name) 11:42:20 - nuvolos:/files$ ipython kernel install --user --name=author-kernel   \nNow we can select kernel in the notebook view, i.e.¬†we will choose the python engine which goes together with this particular environment.\n\n\n\nSelecting a Kernel from a python environment\n\n\n\n\n\nchoose our created author-name environment\n\n\nClicking on the ‚ñ∂Ô∏è button left of each cell, we can run the contained code. Here I added two code cells to print python and networkx package versions.\n\n\n\nexecuting code in notebook using our environment. Notice that python and networkx versions correspond to our specs above.\n\n\n\nThe preceding steps of starting a notebook - from the external drive /space_mounts is illustrated in this video:\n\n\nCreating a conda env via a .yml file\nWe could have equally well created a full recipe file, from which to build this environment. This may be useful to share with authors. You would save that as author-env.yml for instance:\nname: author-name\ndependencies:\n  - python=3.11\n  - matplotlib\n  - seaborn\n  - netwworkx\n  - pandas\n  - numpy\n  - scipy\n  - ipykernel\n  - pip\nThen, one can create the env via\nconda env create -f author-env.yml\n\n\n\nCreating a conda env from a supplie .yml file\nSome authors actually give us such a file! In this case, the same applies:\n(base) 11:49:15 - nuvolos:/files$ conda env create -f /files/Replication_package_Agostini_Bloise_Tancioni/DML_python/environment.yml\n\ndone\n#\n# To activate this environment, use\n#\n#     $ conda activate ectj_abt\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\n\n(base) 09:52:23 - nuvolos:/files/Replication_package$ conda activate ectj_abt\n(ectj_abt) 09:55:17 - nuvolos:/files/Replication_package$ python --version\nPython 3.9.7\n(ectj_abt) 09:55:31 - nuvolos:/files/Replication_package$ python Main.py\nConda environment ectj_abt already exists. Skipping creation.\nRunning the estimation for dml_JJ...\n\n\n\n\n\n\nEnforce Best Practice\n\n\n\nIf a python package does not contain a virtual environment, you must recommend the authors to add this in your report.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "replicator-resources.html#stata",
    "href": "replicator-resources.html#stata",
    "title": "Replicator Resources",
    "section": "stata",
    "text": "stata\nThere is an excellent guide for how to lock in add-on stata packages into a certain state. By default, there is no mechanism in stata which would version add-on packages (the user is responsible to install the correct version - which may be extremely difficult in practice because older versions may no longer be retrievable).\n\n\n\n\n\n\nStata Library Guide\n\n\n\nThe relevant guide is by Julian Reif and accessible here.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "replicator-resources.html#julia",
    "href": "replicator-resources.html#julia",
    "title": "Replicator Resources",
    "section": "julia",
    "text": "julia\nEnvironment creating is built-in with base julia in the package manager. In any given directory, type ] to enter Pkg mode. Here we create an environment at the current directory . and add two packages. The resulting files Project.toml and Manifest.toml encode the exact versions of all component packages (i.e.¬†including dependencies of the packages we are asking for). Any user can use those 2 files to recreate the exact same software environment as the author.\n(@v1.10) pkg&gt; activate .\n  Activating new project at `~/replications/Oswald-123456/full-package/3-replication-package`\n\n(3-replication-package) pkg&gt; add GLM DataFrames\n   Resolving package versions...\n   Installed LogExpFunctions ‚îÄ v0.3.28\n   Installed Distributions ‚îÄ‚îÄ‚îÄ v0.25.109\n    Updating `~/replications/Oswald-123456/full-package/3-replication-package/Project.toml`\n  [a93c6f00] + DataFrames v1.6.1\n  [38e38edf] + GLM v1.9.0\n    Updating `~/replications/Oswald-123456/full-package/3-replication-package/Manifest.toml`\n\n\n\n\n\n\n\nNo julia without Project.toml!\n\n\n\nWe require at least a Project.toml for any julia project. We strongly recommend supplying also a Manifest.toml from the authors.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "replicator-resources.html#memory-consumption",
    "href": "replicator-resources.html#memory-consumption",
    "title": "Replicator Resources",
    "section": "Memory Consumption",
    "text": "Memory Consumption\n\nNuvolos (and any shared resource like a HPC system) will strictly enforce memory (RAM) limits.\nIf your app consumes more than what is available, the app will be killed. You will not get an error message in most cases, but your app will just freeze or shut down.\nYou can increase the size (CPU + RAM) by clicking on the cogwheel next to the apps start button in the ‚ÄúApplications‚Äù view.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "replicator-resources.html#large-files-on-nuvolos",
    "href": "replicator-resources.html#large-files-on-nuvolos",
    "title": "Replicator Resources",
    "section": "large files on nuvolos",
    "text": "large files on nuvolos\nYou can try the web-based uploader which will take any URL directly:\n\nWhen copying the dropbox URL, remember to change ‚Äòdl=0‚Äô to ‚Äòdl=1‚Äô inside the URL. This forces the download. For example:\nhttps://www.dropbox.com/scl/fo/gumryf1zs8lwk5zq5udo7/ABrnRWk5w859IIib/Author-YYYYMMDD-R1?*dl=1*\nTo rename the file, open the terminal and write\nmv 'old_file_name' 'new_file_name'\nIf the file is very large, move it to the ‚Äòlarge file storage‚Äô that you can create in the ‚ÄòProject Configuration‚Äô tab on Nuvolos.\n(base) nuvolos@nuvolos:/files$ ls\n'old_file_name' 'some_folder'\n(base) nuvolos@nuvolos:/files$ mv 'old_file_name' 'new_file_name.zip'\n(base) nuvolos@nuvolos:/files$ mv 'new_file_name.zip' /space_mounts/mount_name/\nFor very large files, however, this does not work well and you need to use the dropbox sync integration. This will map a specific folder in your dropbox onto your nuvolos instance at /dropbox",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "replicator-resources.html#the-grf-random-forests-package",
    "href": "replicator-resources.html#the-grf-random-forests-package",
    "title": "Replicator Resources",
    "section": "The grf Random Forests Package",
    "text": "The grf Random Forests Package\nThere is a well-documented problem with cross platform compatibility. Only a certain setting of the regression_forest command will reproduce results across different platforms. The setting concerns the arguments num.threads and seed. Please make sure those are set. Reference here and example issue here",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "replicator-resources.html#sharing-full-r-libraries-does-not-work-in-general",
    "href": "replicator-resources.html#sharing-full-r-libraries-does-not-work-in-general",
    "title": "Replicator Resources",
    "section": "Sharing Full R Libraries does not work in general",
    "text": "Sharing Full R Libraries does not work in general\n\nyou cannot just include your direct dependencies in an R package and hope that just works.\nBy the way, R package need to be installed via a specific process (install.packages); it is not possible to copy a package directly into the local library location. For instance, for me this is\n\n&gt; .libPaths()\n[1] \"/Users/floswald/Library/R/arm64/4.2/library\"                         \n[2] \"/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\"\nIf an author provides me with a set of libraries by just copying them out of their libPaths() and into the package, so that we could use them, this will only work under certain conditions; The OS and underlying compiler infrastructure need to be identical, for example. Simply put, if the author used MacOS 13.4.1, this will not work an any windows machine. It will most likely not work on any other MacOS either.\n\nR package installation may use system libraries and tools in order to build the package for your system. Most packages are pre-built binaries which just download and plug in, but some are not. This is particularly true for older versions, for which binaries are no long available.\n\n\nyou will miss upstream dependencies. RcppEigen was not provided here.\n\n&gt; install.packages(\"HDLPrepro_1.12.tar.gz\", repos = NULL, type = \"source\")\nInstalling package into ‚Äò/usr/local/lib/R/site-library‚Äô\n(as ‚Äòlib‚Äô is unspecified)\nERROR: dependencies ‚Äòbigtime‚Äô, ‚Äòdesla‚Äô, ‚Äòggpubr‚Äô, ‚Äòrrpack‚Äô, ‚ÄòtsDyn‚Äô, ‚Äòvars‚Äô, ‚ÄòRcppProgress‚Äô, ‚Äòsitmo‚Äô are not available for package ‚ÄòHDLPrepro‚Äô\n* removing ‚Äò/usr/local/lib/R/site-library/HDLPrepro‚Äô\nWarning in install.packages :\n  installation of package ‚ÄòHDLPrepro_1.12.tar.gz‚Äô had non-zero exit status\n&gt; \n&gt; install.packages(\"Backup copies of other packages/bigtime_0.2.2.tar.gz\", repos = NULL, type = \"source\")\nInstalling package into ‚Äò/usr/local/lib/R/site-library‚Äô\n(as ‚Äòlib‚Äô is unspecified)\nERROR: dependencies ‚Äòcorrplot‚Äô, ‚ÄòRcppEigen‚Äô are not available for package ‚Äòbigtime‚Äô\n* removing ‚Äò/usr/local/lib/R/site-library/bigtime‚Äô\nWarning in install.packages :\n  installation of package ‚ÄòBackup copies of other packages/bigtime_0.2.2.tar.gz‚Äô had non-zero exit status\nIn general, R is difficult in this regard if we have complicated version environments. The most advertised solution is renv, but I have to say that even this fails often for reasons outside the R environment, for example, a certain C compiler or fortran compiler with certain support libraries being needed to build a specific version of an outdate R package. While renv is a great step ahead, it is not a silver bullet.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "replicator-resources.html#dealing-with-large-files",
    "href": "replicator-resources.html#dealing-with-large-files",
    "title": "Replicator Resources",
    "section": "Dealing with Large Files",
    "text": "Dealing with Large Files\nLarge (data) files are complicated. Not only do they consume a lot of disk space, the real problem comes from transferring them over the internet. There may be losses along the way which invalidate the file.\n\n\n\n\n\n\nCheck if files are Identical?\n\n\n\nSuppose you have a 6GB dataset and want to quickly check whether it is identical to the previous version you obtained. You don‚Äôt want to check each row of that dataset. Instead, you could compute the md5sum, which is akin to counting bits in the file in a certain kind of way and summing them up. It‚Äôs like a digital fingerprint of a file. For example to verify that file_to_check.csv is identical you would do on your linux/Mac terminal\nmd5sum file_to_check.csv\nin both versions of the package, and verify that the result is the same. On your windows powershell you would do this\nCertUtil -hashfile file_to_check.csv MD5\n\n\n\nCompression of files\n\nThere are several compression technologies out there, indicated by various filename endings .zip, .tar, .gz, .7z etc.\n\n\nThere are many different facets to compression which sometimes cause problems.\n\nThe md5 hash of a zip file create on one machine is not necessarily identical to the md5 hash of the zip file created on another machine - despite both having the exact same content. This is because different systems use different algorithms to create the zip file.\nFor zip files larger than 4GB, the macOS default archiver utility often fails with cryptic errors.\na good solution is the p7zip utility. Install via brew install p7zip and used like this: 7za x large_package_to_unzip.zip dest_name\nWe can split a zip into several smaller parts: https://superuser.com/questions/336219/how-do-i-split-a-zip-file-into-multiple-segments. For example we had to do this on this package.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "training/git-slides.html#git-vs.-dropbox-for-version-control",
    "href": "training/git-slides.html#git-vs.-dropbox-for-version-control",
    "title": "Git Version Control",
    "section": "üÜö Git vs.¬†Dropbox for Version Control",
    "text": "üÜö Git vs.¬†Dropbox for Version Control\n\n\n\n\n\n\n\n\n\nFeature\nGit\nDropbox\n\n\n\n\nVersion History\nFull commit history with messages\nKeeps older versions, no clear log\n\n\nUnderstanding Changes\nLine-by-line diffs, commit messages\nNo diffs, no context for changes\n\n\nBranching & Merging\nYes ‚Äî supports parallel development\nNo ‚Äî one version at a time\n\n\nCollaboration\nDesigned for multiple developers\nRisk of overwrite when editing together\n\n\nOffline Access\nFully local; sync when ready\nNeeds internet to sync versions\n\n\nProject Structure\nTracks full directory state\nSyncs files individually\n\n\nIntended Use\nCode & structured text, reproducibility\nGeneral file storage and backup\n\n\n\n\n\n‚úÖ Git is a professional-grade version control system.\n\nüì¶ Dropbox is great for basic backups, not for collaborative code development.",
    "crumbs": [
      "Git workshop"
    ]
  },
  {
    "objectID": "training/git-slides.html#tracking-things",
    "href": "training/git-slides.html#tracking-things",
    "title": "Git Version Control",
    "section": "Tracking Things",
    "text": "Tracking Things\n\nWe only track code (i.e.¬†text files!) with version control.\n(We can track small datasets. Github has a 100MB file size limit)\nIn our JPE org, we will never track data with version control.\nData will be downloaded directly from the dataverse deposit, where authors submit their packages.",
    "crumbs": [
      "Git workshop"
    ]
  },
  {
    "objectID": "training/git-slides.html#preview-of-jpe-workflow",
    "href": "training/git-slides.html#preview-of-jpe-workflow",
    "title": "Git Version Control",
    "section": "Preview of JPE Workflow",
    "text": "Preview of JPE Workflow\n\nEach paper will get a github repository.\nThe repo contains\n\nall code contained in the package\nthe paper and the appendix pdfs,\ntemplate code with my tools,\nand the reports I prepare for you and which you will edit.\n\nYou will not send me emails with pdfs, but you will push a commit to this repo.\n\n\n\n\n\n\n\n\nif you have been following along üßê\n\n\nWhat is not contained in the repo?",
    "crumbs": [
      "Git workshop"
    ]
  },
  {
    "objectID": "training/git-slides.html#open-your-vscode",
    "href": "training/git-slides.html#open-your-vscode",
    "title": "Git Version Control",
    "section": "Open your VScode",
    "text": "Open your VScode\n\nExplain program\ncreate directory under your home directory (or anywhere really)\ncreate a text file\nopen terminal (shift-cmd-P and type terminal)\ncreate text file in terminal:\n\necho \"This is the first version of the file.\" &gt; notes.txt",
    "crumbs": [
      "Git workshop"
    ]
  },
  {
    "objectID": "training/git-slides.html#is-this-git",
    "href": "training/git-slides.html#is-this-git",
    "title": "Git Version Control",
    "section": "is this git?",
    "text": "is this git?\ngit status\n\n\nerror. not a git repo. not tracking anything.\nAlright, let‚Äôs start tracking.\n\ngit init",
    "crumbs": [
      "Git workshop"
    ]
  },
  {
    "objectID": "training/git-slides.html#git-status",
    "href": "training/git-slides.html#git-status",
    "title": "Git Version Control",
    "section": "git status",
    "text": "git status\n\ngit status informs you about the current status of the repo.\nLet‚Äôs record the current state.\nWe need to first select which files to record (with git add), then we actually add them to history with git commit.",
    "crumbs": [
      "Git workshop"
    ]
  },
  {
    "objectID": "training/git-slides.html#lets-add-some-code",
    "href": "training/git-slides.html#lets-add-some-code",
    "title": "Git Version Control",
    "section": "let‚Äôs add some code",
    "text": "let‚Äôs add some code\n# add to code.R\nprint(\"hi! drawing a random number\")\ntimestamp()\nrunif(1)",
    "crumbs": [
      "Git workshop"
    ]
  },
  {
    "objectID": "training/git-slides.html#lets-add-a-readme",
    "href": "training/git-slides.html#lets-add-a-readme",
    "title": "Git Version Control",
    "section": "Let‚Äôs add a readme",
    "text": "Let‚Äôs add a readme\nlike here",
    "crumbs": [
      "Git workshop"
    ]
  },
  {
    "objectID": "training/git-slides.html#resources",
    "href": "training/git-slides.html#resources",
    "title": "Git Version Control",
    "section": "Resources",
    "text": "Resources\n\nScPoProgramming\nGetting Started with github Desktop",
    "crumbs": [
      "Git workshop"
    ]
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "No matching items"
  }
]